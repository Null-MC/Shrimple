#define RENDER_WATER
#define RENDER_GBUFFER
#define RENDER_TESS_CONTROL

layout (vertices=3) out;

#include "/lib/constants.glsl"
#include "/lib/common.glsl"

const float MIN_DISTANCE = 4;
const float MAX_DISTANCE = 40;

in VertexData {
    vec4 color;
    vec2 lmcoord;
    vec2 texcoord;
    vec3 localPos;
    vec2 localCoord;
    vec3 localNormal;
    vec4 localTangent;

    flat int blockId;
    flat mat2 atlasBounds;

    #ifdef IS_LPV_ENABLED
        vec3 originPos;
    #endif

    #if defined WORLD_WATER_ENABLED && (defined WATER_TESSELLATION_ENABLED || WATER_WAVE_SIZE > 0)
        vec3 surfacePos;
    #endif

    #if defined WORLD_WATER_ENABLED && defined WATER_TESSELLATION_ENABLED
        float vertexY;
    #endif

    #if defined PARALLAX_ENABLED || defined WORLD_WATER_ENABLED
        vec3 viewPos_T;

        #if defined WORLD_SKY_ENABLED && defined WORLD_SHADOW_ENABLED
            vec3 lightPos_T;
        #endif
    #endif

    #if defined RENDER_SHADOWS_ENABLED && !defined DEFERRED_BUFFER_ENABLED
        #if SHADOW_TYPE == SHADOW_TYPE_CASCADED
            vec3 shadowPos[4];
            flat int shadowTile;
        #else
            vec3 shadowPos;
        #endif
    #endif
} vIn[];

out VertexData {
    vec4 color;
    vec2 lmcoord;
    vec2 texcoord;
    vec3 localPos;
    vec2 localCoord;
    vec3 localNormal;
    vec4 localTangent;

    flat int blockId;
    flat mat2 atlasBounds;

    #ifdef IS_LPV_ENABLED
        vec3 originPos;
    #endif

    #if defined WORLD_WATER_ENABLED && (defined WATER_TESSELLATION_ENABLED || WATER_WAVE_SIZE > 0)
        vec3 surfacePos;
    #endif

    #if defined WORLD_WATER_ENABLED && defined WATER_TESSELLATION_ENABLED
        float vertexY;
    #endif

    #if defined PARALLAX_ENABLED || defined WORLD_WATER_ENABLED
        vec3 viewPos_T;

        #if defined WORLD_SKY_ENABLED && defined WORLD_SHADOW_ENABLED
            vec3 lightPos_T;
        #endif
    #endif

    #if defined RENDER_SHADOWS_ENABLED && !defined DEFERRED_BUFFER_ENABLED
        #if SHADOW_TYPE == SHADOW_TYPE_CASCADED
            vec3 shadowPos[4];
            flat int shadowTile;
        #else
            vec3 shadowPos;
        #endif
    #endif
} vOut[];

#ifdef WORLD_WATER_ENABLED
    #include "/lib/blocks.glsl"
#endif

#include "/lib/utility/tessellation.glsl"


void main() {
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    vOut[gl_InvocationID].color = vIn[gl_InvocationID].color;
    vOut[gl_InvocationID].lmcoord = vIn[gl_InvocationID].lmcoord;
    vOut[gl_InvocationID].texcoord = vIn[gl_InvocationID].texcoord;
    vOut[gl_InvocationID].localPos = vIn[gl_InvocationID].localPos;
    vOut[gl_InvocationID].localCoord = vIn[gl_InvocationID].localCoord;
    vOut[gl_InvocationID].localNormal = vIn[gl_InvocationID].localNormal;
    vOut[gl_InvocationID].localTangent = vIn[gl_InvocationID].localTangent;

    vOut[gl_InvocationID].blockId = vIn[gl_InvocationID].blockId;
    vOut[gl_InvocationID].atlasBounds = vIn[gl_InvocationID].atlasBounds;

    #ifdef IS_LPV_ENABLED
        vOut[gl_InvocationID].originPos = vIn[gl_InvocationID].originPos;
    #endif

    #if defined WORLD_WATER_ENABLED && (defined WATER_TESSELLATION_ENABLED || WATER_WAVE_SIZE > 0)
        vOut[gl_InvocationID].surfacePos = vIn[gl_InvocationID].surfacePos;
    #endif

    #if defined WORLD_WATER_ENABLED && defined WATER_TESSELLATION_ENABLED
        vOut[gl_InvocationID].vertexY = vIn[gl_InvocationID].vertexY;
    #endif

    #if defined PARALLAX_ENABLED || defined WORLD_WATER_ENABLED
        vOut[gl_InvocationID].viewPos_T = vIn[gl_InvocationID].viewPos_T;

        #if defined WORLD_SKY_ENABLED && defined WORLD_SHADOW_ENABLED
            vOut[gl_InvocationID].lightPos_T = vIn[gl_InvocationID].lightPos_T;
        #endif
    #endif

    #if defined RENDER_SHADOWS_ENABLED && !defined DEFERRED_BUFFER_ENABLED
        #if SHADOW_TYPE == SHADOW_TYPE_CASCADED
            vOut[gl_InvocationID].shadowPos[0] = vIn[gl_InvocationID].shadowPos[0];
            vOut[gl_InvocationID].shadowPos[1] = vIn[gl_InvocationID].shadowPos[1];
            vOut[gl_InvocationID].shadowPos[2] = vIn[gl_InvocationID].shadowPos[2];
            vOut[gl_InvocationID].shadowPos[3] = vIn[gl_InvocationID].shadowPos[3];

            vOut[gl_InvocationID].shadowTile = vIn[gl_InvocationID].shadowTile;
        #else
            vOut[gl_InvocationID].shadowPos = vIn[gl_InvocationID].shadowPos;
        #endif
    #endif

    if (gl_InvocationID == 0) {
        float maxQuality = 1.0;
        #if DISPLACE_MODE == DISPLACE_TESSELATION
            maxQuality = MATERIAL_TESSELLATION_QUALITY;
        #endif

        #if defined WORLD_WATER_ENABLED && defined WATER_TESSELLATION_ENABLED
            if (vIn[0].blockId == BLOCK_WATER)
                maxQuality = WATER_TESSELLATION_QUALITY;
        #endif

        vec3 distances = GetPatchDistances(MIN_DISTANCE, MAX_DISTANCE);
        ApplyPatchControl(distances, maxQuality);
    }
}
