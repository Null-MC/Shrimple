{
  "unusedString": "
    #include "/lib/constants.glsl"
    #include "/lib/common.glsl"
  ",
  "version": 1,
  "excludeLodsFromVanillaDepth": false,
  #ifdef DEFERRED_BUFFER_ENABLED
    #ifdef EFFECT_TAA_ENABLED
      "opaqueDrawBuffers": [1, 3, 9, 7],
      "translucentDrawBuffers": [1, 3, 9, 7],
    #else
      "opaqueDrawBuffers": [1, 3, 9],
      "translucentDrawBuffers": [1, 3, 9],
    #endif
  #else
    #ifdef EFFECT_TAA_ENABLED
      "opaqueDrawBuffers": [0, 9, 7],
      "translucentDrawBuffers": [0, 9, 7],
    #else
      "opaqueDrawBuffers": [0, 9],
      "translucentDrawBuffers": [0, 9],
    #endif
  #endif
  #ifdef DEFERRED_BUFFER_ENABLED
  "blending": {
    -1: "off"
  },
  #endif,
  #ifdef EFFECT_TAA_ENABLED
    "taaOffset": "{return taa_offset;}",
  #endif
  "uniforms": [
    "gbufferModelView",
    "gbufferModelViewInverse",
    "gbufferProjection",
    "gbufferProjectionInverse",
    "gbufferPreviousModelView",
    "gbufferPreviousProjection",
    "shadowModelView",
    "shadowModelViewInverse",
    "shadowProjection",
    "shadowProjectionInverse",
    "cameraPosition",
    "previousCameraPosition",
    "near",
    "far",
    "frameTimeCounter",
    "sunAngle",
    "rainStrength",
    "fogStart",
    "fogEnd",
    "fogShape",
    "fogColor",
    "skyColor",
    "wetness",
    "worldTime",
    "moonPhase",
    "frameCounter",
    "isEyeInWater",
    "firstPersonCamera",
    "playerBodyVector",
    "eyePosition",
    "relativeEyePosition",
    "cloudTime",
    "blindness",
    "nightVision",
    "darknessFactor",
    "eyeAltitude",
    "viewSize",
    "waterDensitySmooth",
    "WaterScatterColor",
    "WaterAbsorbColor",
    "weatherStrength",
    "pixelSize",
    "taa_offset"
  ],
  "samplers": {
    "lightmap": "sampler2D",
    "noisetex": "sampler2D",
    "texSky": "sampler2D",
    "texSkyIrradiance": "sampler2D",
    "texClouds": "sampler3D"
  },
  "ssbos": {
    -1:"
      struct StaticLightData {
        uint Color;
        uint Offset;
        uint RangeSize;
        uint Metadata;
      };

      struct BlockCollisionData {
        uvec2 Bounds[BLOCK_MASK_PARTS];
        uint Count;
      };

      struct StaticBlockData {
        uint lightType;

        float materialRough;
        float materialMetalF0;
        float materialSSS;

        #if WORLD_WIND_STRENGTH > 0
          float wavingRange;
          uint wavingAttachment;
        #endif

        #ifdef IS_LPV_ENABLED
          uint lpv_data;
        #endif

        #ifdef IS_TRACING_ENABLED
          BlockCollisionData Collisions;
        #endif
      };
    ",
    0:"{
      vec3 HandLightPos1;
      uint HandLightType1;
      vec3 HandLightPos2;
      uint HandLightType2;
      uint HandLightTypePrevious1;
      uint HandLightTypePrevious2;
      int worldTimeCurrent;
      int worldTimePrevious;
      mat4 matColorPost;
      vec3 localSunDirection;
      vec3 localSkyLightDirection;
      vec3 WorldSunLightColor;
      vec3 WorldMoonLightColor;
      vec3 WorldSkyLightColor;
      vec3 WorldSkyAmbientColor;
      mat4 gbufferModelViewProjectionInverse;
      mat4 gbufferPreviousModelViewProjection;
      mat4 shadowModelViewEx;
      mat4 shadowProjectionEx;

      #if defined WORLD_SHADOW_ENABLED && SHADOW_TYPE == SHADOW_TYPE_DISTORTED
        mat4 shadowModelViewProjection;
      #endif

      #ifdef DISTANT_HORIZONS
        mat4 dhProjectionFull;
        mat4 dhProjectionFullInv;
        mat4 dhProjectionFullPrev;
      #endif

      vec4 lightningPosition;
    }",
    2:"{StaticBlockData StaticBlockMap[];}",
    3:"{StaticLightData StaticLightMap[];}"
  }
}
